import React, { useRef } from 'react';
import { useTypedSelector } from 'client/redux/types';
import Swiper from 'react-id-swiper';
import { useInView } from 'react-intersection-observer';
import LazyLoad from 'components/LazyLoad/LazyLoad';
import LogoNav from './LogoNav/LogoNav';
import { useLocation } from 'react-router-dom';

/**
 * Header Component
 */
const Header: React.FC = () => {
  const location = useLocation();
  const heroSlides = useTypedSelector(
    (state) => state.pageHome.content.heroSlides
  );

  const swiperRef = useRef(null);
  const swiperConfig = {
    autoplay: {
      delay: 7000,
    },
    speed: 1000,
    fadeEffect: {
      crossFade: true,
    },
    effect: 'fade' as 'fade',
    autoHeight: true,
    preloadImages: false,
    loop: false,
    shouldSwiperUpdate: true,
    updateOnImagesReady: true,
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
    },
  };

  /**
   *
   * @name goNext
   * @type {function}
   */
  const goNext = () => {
    if (swiperRef.current?.swiper) {
      const { swiper } = swiperRef.current;
      if (swiper.activeIndex === swiper.slides.length - 1) {
        // Fake Loop due to React issue with Loop mode
        swiper.slideTo(0);
      } else {
        swiper.slideNext();
      }
    }
  };

  /**
   *
   * @name goPrev
   * @type {function}
   */
  const goPrev = () => {
    if (swiperRef.current?.swiper) {
      const { swiper } = swiperRef.current;
      if (swiper.activeIndex === 0) {
        // Fake Loop due to React issue with Loop mode
        swiper.slideTo(swiper.slides.length - 1);
      } else {
        swiper.slidePrev();
      }
    }
  };

  /**
   * @description Hook that is generated by the useInView function from the
   *              react-intersection-observer library.
   *
   */
  const [sliderNavRef, inView] = useInView({
    threshold: 1,
    rootMargin: '-150px',
  });

  return (
    <header className="Header">
      <div className="Header__innerWrap grid">
        <LogoNav />
        {location.pathname === '/' && heroSlides && heroSlides.length > 0 && (
          <div className="Header__sliderOuterWrap">
            <div className="Header__sliderWrap">
              <Swiper
                data-test="Header__slider"
                ref={swiperRef}
                {...swiperConfig}
              >
                {heroSlides.map((slide) => (
                  <div
                    className="aspectWrap aspectWrap--ratio-16-10"
                    key={slide.id}
                  >
                    <LazyLoad>
                      <picture>
                        <source
                          type="image/webp"
                          srcSet={`${slide.image.sizes.heroSlider768up2x}.webp 1x,
                            ${slide.image.sizes.heroSlider768up2x}.webp 1.5x,
                            ${slide.image.sizes.heroSlider768up2x}.webp 2x`}
                          media="(min-width: 768px)"
                        />
                        <source
                          type="image/jpeg"
                          srcSet={`${slide.image.sizes.heroSlider768up2x} 1x,
                            ${slide.image.sizes.heroSlider768up2x} 1.5x,
                            ${slide.image.sizes.heroSlider768up2x} 2x`}
                          media="(min-width: 768px)"
                        />
                        <source
                          type="image/webp"
                          srcSet={`${slide.image.sizes.heroSlider481up}.webp 1x,
                            ${slide.image.sizes.heroSlider481up2x}.webp 1.5x,
                            ${slide.image.sizes.heroSlider481up2x}.webp 2x`}
                        />
                        <img
                          srcSet={`${slide.image.sizes.heroSlider481up} 1x,
                            ${slide.image.sizes.heroSlider481up2x} 1.5x,
                            ${slide.image.sizes.heroSlider481up2x} 2x`}
                          src={slide.image.sizes.heroSlider481up}
                          alt={slide.image.alt}
                          width={slide.image.width}
                          height={slide.image.height}
                        />
                      </picture>
                    </LazyLoad>
                  </div>
                ))}
              </Swiper>
            </div>
          </div>
        )}
      </div>

      {location.pathname === '/' && (
        <div
          ref={sliderNavRef}
          className={`Slider__directionNav${
            inView ? ' Slider__directionNav--active' : ''
          }`}
        >
          <button type="button" onClick={goPrev} className="Slider__prev">
            Previous
          </button>
          <button type="button" onClick={goNext} className="Slider__next">
            Next
          </button>
        </div>
      )}
    </header>
  );
};

export default Header;
