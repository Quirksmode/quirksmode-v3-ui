import React, { createRef } from 'react';
import { useSpring, animated } from 'react-spring';
import { useInView } from 'react-intersection-observer';
import LazyLoad from 'components/LazyLoad/LazyLoad';
import { FrameProps } from './Frame.types';

/**
 * Calculate the cursor position and return the relevant coordinates
 */
const calc = (
  e: React.MouseEvent,
  frameRef: React.MutableRefObject<HTMLInputElement>
) => {
  const bounds = frameRef.current.getBoundingClientRect();
  const xPos = e.clientX - bounds.left - bounds.width / 2;
  const yPos = e.clientY - bounds.top - bounds.height / 2;
  return [-yPos / 20, xPos / 20, 1];
};

/**
 * Transform the x, y and scale
 *
 * @param x [X coordinate]
 * @param y [Y coordinate]
 * @param s [Scale]
 */
const trans = (x: number, y: number, s: number) =>
  `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;

/**
 * Frame Component
 *
 * @param props.isNew [Show/Hide the New indicator]
 * @param props.featuredImage [Featured Image]
 * @param props.String [The Title]
 * @param props.size [The size of the Frame]
 */
const Frame: React.FC<FrameProps> = ({
  isNew = false,
  featuredImage,
  title = null,
  size = 'Small',
  date = null,
}) => {
  // React Ref for the Frame
  const frameRef = createRef() as React.MutableRefObject<HTMLInputElement>;

  // React Spring Hook for defining the animation
  const [styles, set] = useSpring(() => ({
    xys: [0, 0, 1],
    config: { mass: 5, tension: 350, friction: 40 },
  }));

  /**
   * Hook that is generated by the useInView function from the
   * react-intersection-observer library.
   */
  const [imgRef, inView] = useInView({
    threshold: 0.1,
    rootMargin: '0px',
    triggerOnce: true,
  });

  return (
    <animated.div
      ref={frameRef}
      className="Frame Frame--rollover"
      onMouseMove={(e) => set({ xys: calc(e, frameRef) })}
      onMouseLeave={() => set({ xys: [0, 0, 1] })}
      style={{ transform: styles.xys.interpolate(trans as any) }}
    >
      <div
        ref={imgRef}
        className={`Frame__inner${inView ? ' Frame__inner--inView' : ''}`}
      >
        {isNew && (
          <div className="Frame__new">
            <span>New</span>
          </div>
        )}

        <div className="Frame__aspect Frame--reflection">
          <LazyLoad>
            <picture>
              <source
                type="image/webp"
                srcSet={`${featuredImage.sizes[`quirksmode${size}2x`]}.webp 1x,
                      ${featuredImage.sizes[`quirksmode${size}2x`]}.webp 1.5x,
                      ${featuredImage.sizes[`quirksmode${size}2x`]}.webp 2x`}
              />
              <img
                srcSet={`${featuredImage.sizes[`quirksmode${size}`]} 1x,
                      ${featuredImage.sizes[`quirksmode${size}2x`]} 1.5x,
                      ${featuredImage.sizes[`quirksmode${size}2x`]} 2x`}
                src={featuredImage.sizes[`quirksmode${size}`]}
                alt={featuredImage.alt}
                width={featuredImage.width}
                height={featuredImage.width}
                loading="lazy"
              />
            </picture>
          </LazyLoad>
          {title && <h3 className="Frame__title">{title}</h3>}

          {date && (
            <div className="Frame__date">
              <span>{date}</span>
            </div>
          )}
        </div>
      </div>
    </animated.div>
  );
};

export default Frame;
