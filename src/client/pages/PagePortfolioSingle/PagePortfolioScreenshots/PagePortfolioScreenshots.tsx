import React, { useState, useCallback, useRef } from 'react';
import Swiper from 'react-id-swiper';
import FsLightbox from 'fslightbox-react';
import { useInView } from 'react-intersection-observer';
import { PagePortfolioScreenshotsProps } from './PagePortfolioScreenshots.types';

/**
 * Portfolio Screenshots Component
 */
const PagePortfolioScreenshots: React.FC<PagePortfolioScreenshotsProps> = ({
  screenshots,
}) => {
  const swiperRef = useRef(null);

  // Params for the Swiper component
  const swiperConfig = {
    fadeEffect: {
      crossFade: true,
    },
    effect: 'fade' as 'fade',
    lazyLoading: true,
    preloadImages: true,
    shouldSwiperUpdate: true,
    updateOnImagesReady: true,
    loop: false,
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
    },
  };

  // Go to Next Slide
  const goNext = () => {
    if (swiperRef.current?.swiper) {
      const { swiper } = swiperRef.current;
      if (swiper.activeIndex === swiper.slides.length - 1) {
        // Fake Loop due to React issue with Loop mode
        swiper.slideTo(0);
      } else {
        swiper.slideNext();
      }
    }
  };

  // Go to Previous Slide
  const goPrev = () => {
    if (swiperRef.current?.swiper) {
      const { swiper } = swiperRef.current;
      if (swiper.activeIndex === 0) {
        // Fake Loop due to React issue with Loop mode
        swiper.slideTo(swiper.slides.length - 1);
      } else {
        swiper.slidePrev();
      }
    }
  };

  /**
   * React State mutator for setting the Lightbox Controller.
   * toggle is a flag for opening and closing the lighbox.
   * slide is to set the current slides index.
   */
  const [lightboxController, setLightboxController] = useState({
    toggler: false,
    slide: 1,
  });

  /**
   * Hook that is generated by the useInView function from the
   * react-intersection-observer library.
   */
  const [sliderNavRef, inView] = useInView({
    threshold: 1,
    rootMargin: '-150px',
  });

  // Function/Callback to open the lightbox
  const openLightboxOnSlide = useCallback(
    (e, index) => {
      e.preventDefault();

      // Open/Close the lightbox
      setLightboxController({
        toggler: !lightboxController.toggler,
        slide: index,
      });
      if (swiperRef.current?.swiper !== null) {
        swiperRef.current.swiper.slideTo(index - 1);
      }
    },
    [lightboxController.toggler]
  );

  return (
    screenshots.length && (
      <section className="PagePortfolioScreenshots Page__section Page__section--darkFull">
        <div className="Page__sectionInner grid">
          {screenshots.length && (
            <div className="PagePortfolioScreenshots__sliderWrap">
              <div className="PagePortfolioScreenshots__screenshotOuter">
                <div className="PagePortfolioScreenshots__screenshotInner">
                  <Swiper ref={swiperRef} {...swiperConfig}>
                    {screenshots.map((slide, index) => (
                      <a
                        href={slide.url}
                        key={slide.id}
                        onClick={(e) => openLightboxOnSlide(e, index + 1)}
                        className="PagePortfolioScreenshots__slide aspectWrap aspectWrap--ratio-16-10"
                      >
                        <picture>
                          <source
                            type="image/webp"
                            srcSet={`${slide.sizes.heroSlider768up2x}.webp 1x,
                          ${slide.sizes.heroSlider768up2x}.webp 1.5x,
                          ${slide.sizes.heroSlider768up2x}.webp 2x`}
                            media="(min-width: 768px)"
                          />
                          <source
                            type="image/jpeg"
                            srcSet={`${slide.sizes.heroSlider768up} 1x,
                          ${slide.sizes.heroSlider768up2x} 1.5x,
                          ${slide.sizes.heroSlider768up2x} 2x`}
                            media="(min-width: 768px)"
                          />
                          <source
                            type="image/webp"
                            srcSet={`${slide.sizes.heroSlider481up}.webp 1x,
                          ${slide.sizes.heroSlider481up2x}.webp 1.5x,
                          ${slide.sizes.heroSlider481up2x}.webp 2x`}
                          />
                          <img
                            srcSet={`${slide.sizes.heroSlider481up} 1x,
                          ${slide.sizes.heroSlider481up2x} 1.5x,
                          ${slide.sizes.heroSlider481up2x} 2x`}
                            src={slide.sizes.heroSlider481up}
                            alt={slide.alt}
                            width={slide.width}
                            height={slide.height}
                          />
                        </picture>
                      </a>
                    ))}
                  </Swiper>
                </div>
              </div>
              {screenshots.length && (
                <FsLightbox
                  toggler={lightboxController.toggler}
                  type="image"
                  sources={screenshots.map((slide) => slide.url)}
                  slide={lightboxController.slide}
                />
              )}
            </div>
          )}
        </div>
        <div
          ref={sliderNavRef}
          className={`Slider__directionNav${
            inView ? ' Slider__directionNav--active' : ''
          }`}
        >
          <button type="button" onClick={goPrev} className="Slider__prev">
            Previous
          </button>
          <button type="button" onClick={goNext} className="Slider__next">
            Next
          </button>
        </div>
      </section>
    )
  );
};

export default PagePortfolioScreenshots;
